{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8fc4f0a-8e3e-4124-85e4-e40929ad72d8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0e5cb1e2-e09a-4bb9-b4d2-89460634a820",
   "metadata": {},
   "outputs": [
    {
     "ename": "UnicodeDecodeError",
     "evalue": "'utf-8' codec can't decode byte 0xe9 in position 1019: invalid continuation byte",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-fb49ad479013>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mfh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"words1.txt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mwords\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mfh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/codecs.py\u001b[0m in \u001b[0;36mdecode\u001b[0;34m(self, input, final)\u001b[0m\n\u001b[1;32m    320\u001b[0m         \u001b[0;31m# decode input (taking the buffer into account)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 322\u001b[0;31m         \u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsumed\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfinal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    323\u001b[0m         \u001b[0;31m# keep undecoded input until the next call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    324\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mconsumed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0xe9 in position 1019: invalid continuation byte"
     ]
    }
   ],
   "source": [
    "# Lab 07 - Regular Expressions\n",
    "# Ilsan, ik10@albion.edu\n",
    "\n",
    "import re\n",
    "\n",
    "# See https://docs.python.org/3/library/re.html\n",
    "\n",
    "fh = open(\"words1.txt\")\n",
    "words = fh.read().lower()\n",
    "fh.close()\n",
    "\n",
    "# Find all occurrences of the word \"the\" in the file\n",
    "# \\b is a word boundary\n",
    "# r\"string\" is a raw string - generally use with regex\n",
    "# raw strings avoid python metacharacter interpreteation of \\\n",
    "myList = re.findall(r\"\\bthe\\b\", words)\n",
    "print(\"the\")\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all words starting with \"the\"\n",
    "# \"the\" followed by any characters\n",
    "print('starting with \"the\"')\n",
    "myList = re.findall(r\"\\bthe\\w*\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "\n",
    "# Find all words ending with \"the\"\n",
    "# \"the\" preceded by any characters\n",
    "print('ending with \"the\"')\n",
    "myList = re.findall(r\"\\b.*the\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "print('\"the\" anywhere')\n",
    "# Find all words containing \"the\" anywhere\n",
    "myList = re.findall(r\"\\b.*the.*\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "print('\"the\" in the middle')\n",
    "# Find all words containing \"the\" anywhere\n",
    "myList = re.findall(r\"\\b.+the.+\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "print('words starting with a vowel')\n",
    "# Find all words containing \"the\" anywhere\n",
    "myList = re.findall(r\"\\b[aeiou].*\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "print('this or that words')\n",
    "# Find all words containing \"the\" anywhere\n",
    "myList = re.findall(r\"\\b.*this.*\\b|\\b.*that.*\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all words ending in ing\n",
    "print('all words ending in \"ing\"')\n",
    "# example: abbreviating\n",
    "myList = re.findall(r\"\\b.*ing\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all three letter words\n",
    "myList = re.findall(r\"\\b.{3}\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all three letter words beginning with d and ending with g\n",
    "# examples: dog, dig \n",
    "myList = re.findall(r\"\\bd.g\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all words containing just the letters a,b,c,d,e,f\n",
    "print('abcdef words')\n",
    "# example: dead, beef\n",
    "myList = re.findall(r\"\\b[abcdefABCDEF]+?\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all words containing all the vowels\n",
    "# example: sequoia\n",
    "myList = re.findall(r\"\\b[aeiouAEIOU]+?\\b\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all words containing letters in alphabetical order\n",
    "# example: ant\n",
    "myList = re.findall(r\"\\b[a]\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "# Find all words containing repeated letters\n",
    "# example: bookkeeper\n",
    "# hint: use () and \\1\n",
    "# see https://docs.python.org/3/library/re.html\n",
    "myList = re.findall(r\"REGEX\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n",
    "\n",
    "\n",
    "# Translate a phone digit into a regex setof letters\n",
    "def digitLetter(n):\n",
    "    if n == 2:\n",
    "        return \"[abc]\"\n",
    "    # COMPLETE THIS\n",
    "    # default: just return digit for 0 or 1\n",
    "    return \"\"+n\n",
    "\n",
    "\n",
    "# WORKS AS IS\n",
    "# example: 629 => \"[mno][abc][wxyz]\"\n",
    "def numberToPhoneRegex(n):\n",
    "    s = str(n)\n",
    "    regex = \"\"\n",
    "    for i in range(len(s)):\n",
    "        d = int(s[i])\n",
    "        r = digitLetter(d)\n",
    "        regex += r\n",
    "    return r\n",
    "\n",
    "\n",
    "# see https://docs.python.org/3/library/re.html\n",
    "regex = numberToPhoneRegex(629)\n",
    "print(regex) # \"[mno][abc][wxyz]\"\n",
    "myList = re.findall(r\"REGEX\", words)\n",
    "print(myList)\n",
    "print(len(myList))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "576d74c0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
